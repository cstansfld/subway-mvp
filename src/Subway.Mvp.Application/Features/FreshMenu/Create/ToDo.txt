public sealed class CreateSomeCommand : ICommand<Guid>
{
    public Guid CommandId { get; set; }
    public string Description { get; set; }
    public DateTime? ... { get; set; }
}

internal sealed class CreateSomeCommandHandler(
    ICacheService cacheService)
    : ICommandHandler<CreateSomeCommand, Guid>
{
    public async Task<Result<Guid>> Handle(CreateSomeCommand command, CancellationToken cancellationToken)
    {
        var someThing = new Domain.SomeThing
        {
            Id = .CommandId,
            Description = command.Description,
            Date =...,
            CreatedAt = DateTime.UtcNow
        };

        cacheService.Add

        return someThing.Id;
    }
}

Request Object

    public sealed class Request
    {
        public Guid Id { get; set; }
        public string Description { get; set; }
        public DateTime? Date { get; set; }
    }

create A MapPost

        public void MapEndpoint(IEndpointRouteBuilder app)
    {
        app.MapPost("...", async (Request request, ISender sender, CancellationToken cancellationToken) =>
        {
            var command = new CreateTodoCommand
            {
                UserId = request.Id,
                Description = request.Description,
                DueDate = request.Date
            };

            Result<Guid> result = await sender.Send(command, cancellationToken);

            return result.IsSuccess ? Results.Ok : result.Failure();
        })
        .WithTags("");
    }